import nat
import bool
import pair

--#5
|||a test, expecting 0
e1:nat
e1= exp(mkPair O (S O))
|||a test, expecting (S O)
e2: nat
e2 = exp(mkPair (S(S(S O))) O)
|||a test, expecting (S(S(S(S O))))
e3: nat
e3= exp(mkPair (S(S O)) (S(S O)))

--#6
|||a test, expecting false
l1: bool
l1 = lep(mkPair (S(S(S(S O)))) O)
|||a test, expecting true
l2: bool
l2 = lep(mkPair O O)
|||a test, expecting true
l3: bool
l3= lep(mkPair O (S O))


--#7: eqp -- given a pair of natural numbers, (a, b), return true if a is equal to be, otherwise return false

|||test expectig true
eqp1: bool
eqp1= eqp(mkPair O O)
|||test expecting false
eqp2: bool
eqp2= eqp(mkPair (S O) O)
|||test expecting false
eqp3:bool
eqp3= eqp(mkPair O (S O))
 

--#8: gtp -- given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false

|||test expecting true
g1:bool
g1 = gtp(mkPair (S O) O)

|||test expecting false
g2:bool
g2= gtp (mkPair (S O) (S O))

|||test expecting false
g3: bool
g3= gtp(mkPair (S(S O)) (S(S(S O))))

--#9: gep -- given a pair of natural numbers, (a, b), return true of a is greater than or equal to b

--test expecting false
gep1:bool
gep1=gep(mkPair (S O) (S(S(S O))))
|||test expecting true
gep2:bool
gep2=gep(mkPair (S(S O)) (S(S O)))
|||test expecting true
gep3:bool
gep3=gep(mkPair (S(S(S O))) O)





--#10: lstp -- given a pair of natural numbers, (a, b), return true if a is less than b

|||test expecting true
ltp1: bool
ltp1=ltp (mkPair (S O) (S(S(S O))))
|||test expecting false
ltp2:bool
ltp2=ltp(mkPair O O)
|||test expecting false
ltp3:bool
ltp3=ltp(mkPair (S O) O)

--Fibonacci sequence
|||test,expecting 5
F1:nat
F1= Fib(S(S(S(S(S(S O))))))

|||test, expecting 8
F2:nat
F2=Fib(S(S(S(S(S(S(S O)))))))

